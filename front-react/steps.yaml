# File Stamp フロントエンド

参考:
    - https://github.com/Takakiriy/Trials/tree/master/try_ReactUserApp_Docker
    - https://github.com/Takakiriy/Trials/tree/master/try_React_REST_API
    - https://github.com/Takakiriy/Trials/tree/master/try_Azure_AKS_quick_start

設定:
    __ApplicationResourceGroupName__: sage-p-file-stamp
    __RepositoryResourceGroupName__: sage-p-acr-1
    __AppResourceGroupName__: sagep-auth1
    __ServicePlan__: sagep-plan1
    __ClusterName__: FileStamp  #// Kubernetes サービス名
    __Region__: japaneast
    __RepositoryName__: sagep
    __RepositoryHost__: sagep.azurecr.io
    __NodeCount__: 1
    __ImageName__: file-stamp-front
    __Tag__: 0.0.4a
    __FrontEndAppName__: sagep-app-service-v004
    __BackEndAppName__: sagep-function-cs
    __BackEndClientID__: in GitHub/FileStamp_private/secret.yaml

app-react アプリケーションをローカルで編集するには:
    - run_install.bat をダブルクリックすると、環境が構築され、ローカル（Dockerのホスト）で Web サーバーが起動します
    - run_start.bat をダブルクリックすると、ローカル（Dockerのホスト）で Web サーバーが起動します

リポジトリに入れないファイルを削除するには:
    - run_clean.bat をダブルクリックします

React アプリケーションの Web サーバーの Docker イメージをビルドして、ローカルで動作確認をします:
    - Node_js/run_install_Node_js.bat をダブルクリックします
    - run_build.bat をダブルクリックします  #// build フォルダーが作られます
    - Docker が起動するまで待ちます
    - docker-compose up --build
    - ブラウザーで localhost を表示します

ローカル Web サーバーを終了して、ローカルのコンテナーを削除します:
    - docker-compose down

React アプリケーションの Web サーバーの Docker イメージ Minikube 環境で動作確認をします:
    - Node_js/run_install_Node_js.bat をダブルクリックします
    - run_build.bat をダブルクリックします  #// build フォルダーが作られます
    - 管理者の PowerShell を開く
    - cd  "front-react"
    - minikube start
    - minikube docker-env --shell powershell | Invoke-Expression
    - docker build  -t sagep.azurecr.io/file-stamp-front:0.0.4a  .
    - kubectl apply -f  "docker-k8s.yaml"
    - kubectl get pods --output=wide
    - kubectl describe pods
    - minikube service  file-stamp-front  #// ブラウザーが開いて React アプリケーションが表示されます
    - kubectl delete -f  "docker-k8s.yaml"
    - kubectl get pods
    - minikube stop
    - Windows の通知領域にある Docker アイコンを右クリック [ Kubernetes >> docker-desktop ]

Azure の ACR に Docker イメージを登録する:
    Node.js アプリケーションなら、build フォルダーを更新する:
        - npm run build
    Docker イメージをビルドする:
        - docker build  -t sagep.azurecr.io/file-stamp-front:0.0.4a  .
        #- template:
            #- docker build  -t __RepositoryHost__/__ImageName__:__Tag__  .

    Azure にログインする:
        - az login [--tenant __TenantID__]

    リポジトリのホスト名＝リソース グループの「ログイン サーバー アドレス」を表示します。 __RepositoryHost__ = .:
        - az acr list --resource-group "sage-p-acr-1" --query "[].{acrLoginServer:loginServer}" \
            --output table
        #- template:
            #- az acr list --resource-group "__RepositoryResourceGroupName__" --query "[].{acrLoginServer:loginServer}" \
            #-    --output table

    ACR インスタンスにログインします:
        - az acr login  --name "sagep"
        #- template:
            #- az acr login  --name "__RepositoryName__"

    Docker イメージをレジストリ（ACR インスタンス）にプッシュ（登録）します。 簡単なサンプルでも 5分かかります。:
        - docker push  "sagep.azurecr.io/file-stamp-front:0.0.4a"
        #- template:
            #- docker push  "__RepositoryHost__/__ImageName__:__Tag__"

    登録されたことを確認します:
        - az acr repository show-tags  --name "sagep"  --repository "file-stamp-front"
        #- template:
            #- az acr repository show-tags  --name "__RepositoryName__"  --repository "__ImageName__"

（しなくてよい）Azure の AKS にデプロイする:
    接続する:
        - az aks get-credentials  --resource-group "sage-p-file-stamp"  --name "FileStamp"
        - kubectl get nodes  #// NAME = aks-nodepool... であることをチェック
        #- template:
            #- az aks get-credentials  --resource-group "__ApplicationResourceGroupName__"  --name "__ClusterName__"
            #- kubectl get nodes  #// NAME = aks-nodepool... であることをチェック
    デプロイする:
        - kubectl apply -f  "docker-k8s.yaml"
        - kubectl get pods --output=wide

（初回のみ）コンテナーをレジストリに登録する（カスタム コンテナーを使う App Service を使っているため）:
    参考: https://docs.microsoft.com/ja-jp/azure/app-service/quickstart-custom-container?pivots=container-linux
    Azure コンテナー レジストリを作成する:
        参考: https://docs.microsoft.com/ja-jp/azure/container-registry/container-registry-get-started-portal
        https://portal.azure.com/ : コンテナー レジストリ
    Visual Studio Code:
        - Docker アイコン（左） >> REGISTRIES >> Connect Registry >> Azure（上） >> Azure（左） >> Sign in to Azure
        - (サブスクリプション名) >> (レジストリ名) >> (イメージ名) >> (タグ名を右クリック) >> Deploy Image to Azure App Service
        - もし、administrator 権限が要求されら:
            - az acr update -n __RegistryName__ --admin-enabled true
            - Visual Studio Code を再起動して Deploy Image to Azure App Service
        - Create new web app（上）:
            new web app: sagep-app-service-v004
            resource group: sagep-auth1
            service plan: sagep-plan1
            template:
                new web app: __FrontEndAppName__
                resource group: __GroupName__
                service plan: __ServicePlan__

（初回のみ）フロントエンドとバックエンドを認証が必要な状態にする:

    バックエンドを実行するのに認証が必要になるように設定し、クライアント ID を調べます:
        - https://portal.azure.com/ >> App Service >> sagep-function-cs
            #- https://portal.azure.com/ >> App Service >> __BackEndAppName__
        - 認証/承認:
            App Service 認証: オン
            要求が認証されない場合に実行するアクション: Azure Active Directory でのログイン
            認証プロバイダー: Azure Active Directory
            管理モード: 簡易
        - OK >> 保存
        - 以下のどちらかの方法で、クライアント ID (__BackEndClientID__) をメモする:
            - Azure Active Directory >> Azure AD アプリ >> クライアント ID
            - Azure Active Directory >> 管理モード=既存のADアプリを選択する >> Azure AD アプリ >>
                App Service名 >> クライアント ID

    フロントエンドを実行するのに認証が必要になるように設定します:
        - https://portal.azure.com/ >> App Service >> sagep-app-service-v004
            #- https://portal.azure.com/ >> App Service >> __FrontEndAppName__
        - 認証/承認:
            App Service 認証: オン
            要求が認証されない場合に実行するアクション: Azure Active Directory でのログイン
            認証プロバイダー: Azure Active Directory
            管理モード: 簡易
        - OK >> 保存

    フロントエンドがバックエンド API を安全に（トークンを使って）呼び出せるように Azure を設定します:
        - https://portal.azure.com/
        - Azure Active Directory:
            - アプリの登録（左） >> すべてのアプリケーション（タブ）
            - sagep-app-service-v004 （を検索）:  #- __FrontEndAppName__ （を検索）
                - API のアクセス許可（左）>> アクセス許可の追加 >> 所属する組織で使用している API（タブ）
                - sagep-function-cs:  #- __BackEndAppName__:
                    user_impersonation: チェック
                    OK: 「アクセス許可の追加」を押す
        - https://resources.azure.com/
        - sagep-app-service-v004 （を検索してリストから選択）:  #- __FrontEndAppName__ （を検索してリストから選択）
            - （左のツリー） sagep-app-service-v004 >> config >>  #- （左のツリー） __FrontEndAppName__ >> config
            - authsettings:
                - Read/Write（右上）
                - [Edit]: |
                    "additionalLoginParams": ["response_type=code id_token","resource=__BackEndClientID__"]
                - [PUT]
                - ReadOnly（右上）

    フロントエンドがトークンを取得するコードを追加します:
        - componentDidMount() in src/App.js

（初回のみ）CORS設定:
    Azure portal >> App Service から CORS を設定

Web App for Containers での継続的デプロイ（まだ調整中です）:
    参考: https://docs.microsoft.com/ja-jp/azure/app-service/deploy-ci-cd-custom-container
    （初回のみ）:
        継続的デプロイを有効にする:
            - https://portal.azure.com/ >> App Service >> （アプリ名）
            - コンテナーの設定:
                コンテナーの設定: 単一のコンテナー
                イメージのソース: Azure コンテナー レジストリ
                継続的なデプロイ: オン  #// ACR の Webhook に登録されます
                OK: 「保存」ボタン
                #// SKU Basic が必要な警告がされたとしても無視できます
    （しばらくデプロイしていないときに必要）App Service の VM を起動します:
        - https://portal.azure.com/ >> App Service >> （アプリ名） >> 概要 >> ブラウズ
    （しばらくデプロイしていないときに必要かもしれない）ACR Webhook を有効にする:
        - https://portal.azure.com/ >> コンテナー レジストリ >> （コンテナー名）
        - bash:
            - az webapp deployment container config --name "sagep-app-service-v004" --resource-group "sagep-auth1" --enable-cd true
                #- az webapp deployment container config --name "__AppName__" --resource-group "__ResourceGroupName__" --enable-cd true
                #// __AppName__ はデプロイ先の App Service アプリケーション名
    デプロイ:
        - 新しいタグ（バージョン）で、Docker イメージをビルドし、レジストリ(ACR)にプッシュします:
            - start run_build.bat
            - docker build  -t sagep.azurecr.io/file-stamp-front:0.0.5a  .  #// 既存のタグで構いません
            - az acr login  --name "sagep"  #// しばらくデプロイしていないときのみ必要
            - docker push  "sagep.azurecr.io/file-stamp-front:0.0.5a"
            #// 「Azure の ACR に Docker イメージを登録する」を参照
                #// ACR の Webhook が発動したことをログから確認できます
                #// App Service が Webhook を受け取るのは、ACR が Webhook を発動してから 40秒後です
        - デプロイされたことをログで確認する:
            - https://portal.azure.com/ >> App Service >> （アプリ名） >> コンテナーの設定
            - 「最新の情報に更新」ボタンを押して、新しいタグがダウンロードされたことを確認します。
                #// ログの一部の例： Status: Downloaded newer image for sagep.azurecr.io/file-stamp-front:0.0.4a
    （必要なら）アプリを再起動します:
        Azure portal の場合:
            - https://portal.azure.com/ >> App Service >> （アプリ名） >> 概要 >> 再起動
        Azure CLI の場合:
            - az webapp restart --name "sagep-app-service-v004" --resource-group "sagep-auth1"
                #- az webapp restart --name "__AppName__" --resource-group "__ResourceGroupName__"

Azure 上の Web アプリケーションを開く:
    - ブラウザーを一度終了する  #// 終了しないと認証エラーになる可能性があります
    - https://sagep-app-service-v004.azurewebsites.net
